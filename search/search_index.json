{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#optimize-ai-workloads-declaratively","title":"Optimize AI Workloads Declaratively","text":"<p>Palimpzest is a cost-based optimizer for AI-powered analytical workloads. It enables users to express complex AI-powered data queries in a high-level declarative language, and it automatically generates optimized execution plans that minimize cost, maximize quality, or balance both.</p> <p>In modern AI applications, executing queries efficiently is a challenge. A single query may require:</p> <ul> <li>Extracting structured data from unstructured sources (e.g., PDFs, emails, research papers)</li> <li>Choosing between different AI models and inference methods</li> <li>Managing trade-offs between execution speed, cost, and accuracy</li> <li>Handling large-scale datasets while minimizing computational overhead</li> </ul> <p>Traditionally, AI engineers must manually fine tune prompts, select models, and optimize inference strategies for each task. This process is not only time consuming but also requires constant updates as models evolve and costs fluctuate.</p> <p>Palimpzest solves this problem by applying cost-based optimization techniques similar to a database query optimizer to AI-powered analytical queries. Users write declarative queries, and Palimpzest:</p> <ol> <li>Analyzes the query structure </li> <li>Explores different execution plans </li> <li>Estimates cost, runtime, and quality </li> <li>Selects the optimal plan based on user-defined constraints  </li> </ol> <p>\ud83d\ude80 Quick Links:</p> <ul> <li>\ud83d\udcc4 Read the Paper</li> <li>\ud83d\udcdd Read the Blog</li> <li>\ud83d\udcac Join the Discord</li> <li>\u25b6\ufe0f Watch the MIT Video </li> </ul> <p>Getting Started I: Install Palimpzest</p> PyPiClone Repo <p>You can find a stable version of the PZ package on PyPI here. To install the package, run: <pre><code>$ pip install palimpzest\n</code></pre></p> <p>Clone the repository and install the package:</p> <pre><code>git clone git@github.com:mitdbg/palimpzest.git\ncd palimpzest\npip install .\n</code></pre> <p>Getting Started II: Demo PZ modules for various tasks</p> Quick StartEven Quicker StartPython Demos <p>The easiest way to get started with Palimpzest is to run the <code>quickstart.ipynb</code> jupyter notebook. We demonstrate the full workflow of working with PZ, including registering a dataset, composing and executing a pipeline, and accessing the results. To run the notebook, you can use the following command:     <pre><code>$ jupyter notebook\n</code></pre> And then access the notebook from the jupyter interface in your browser at <code>localhost:8888</code>.</p> <p>For eager readers, the code in the notebook can be found in the following condensed snippet. However, we do suggest reading the notebook as it contains more insight into each element of the program. <pre><code>import pandas as pd\nimport palimpzest.datamanager.datamanager as pzdm\nfrom palimpzest.sets import Dataset\nfrom palimpzest.core.lib.fields import Field\nfrom palimpzest.core.lib.schemas import Schema, TextFile\nfrom palimpzest.policy import MinCost, MaxQuality\nfrom palimpzest.query.processor.config import QueryProcessorConfig\n\n# Dataset registration\ndataset_path = \"testdata/enron-tiny\"\ndataset_name = \"enron-tiny\"\npzdm.DataDirectory().register_local_directory(dataset_path, dataset_name)\n\n# Dataset loading\ndataset = Dataset(dataset_name, schema=TextFile)\n\n# Schema definition for the fields we wish to compute\nclass Email(Schema):\n    \"\"\"Represents an email, which in practice is usually from a text file\"\"\"\n    sender = Field(desc=\"The email address of the sender\")\n    subject = Field(desc=\"The subject of the email\")\n    date = Field(desc=\"The date the email was sent\")\n\n# Lazy construction of computation to filter for emails about holidays sent in July\ndataset = dataset.convert(Email, desc=\"An email from the Enron dataset\")\ndataset = dataset.filter(\"The email was sent in July\")\ndataset = dataset.filter(\"The email is about holidays\")\n\n# Executing the compuation\npolicy = MinCost()\nconfig = QueryProcessorConfig(\n    policy=policy,\n    verbose=True,\n    processing_strategy=\"no_sentinel\",\n    execution_strategy=\"sequential\",\n    optimizer_strategy=\"pareto\",\n)\nresults, execution_stats = dataset.run(config)\n\n# Writing output to disk\noutput_df = pd.DataFrame([r.to_dict() for r in results])[[\"date\",\"sender\",\"subject\"]]\noutput_df.to_csv(\"july_holiday_emails.csv\")\n</code></pre></p> <p>Below are simple instructions to run PZ on a test data set of enron emails that is included with the system.</p>"},{"location":"#downloading-test-data","title":"Downloading test data","text":"<p>To run the provided demos, you will need to download the test data. Due to the size of the data, we are unable to include it in the repository. You can download the test data by running the following command from a unix terminal (requires <code>wget</code> and <code>tar</code>): <pre><code>chmod +x testdata/download-testdata.sh\n./testdata/download-testdata.sh\n</code></pre> For convenience, we have also provided a script to register all test data with Palimpzest: <pre><code>chmod +x testdata/register-sources.sh\n./testdata/register-sources.sh\n</code></pre></p>"},{"location":"#running-the-demos","title":"Running the Demos","text":"<ul> <li> <p>Initialize the configuration by running <code>pz init</code>.</p> </li> <li> <p>Palimpzest defaults to using OpenAI. You\u2019ll need to export an environment variable <code>OPENAI_API_KEY</code></p> </li> <li> <p>(Skip this step if you ran the <code>register-sources.sh</code> script successfully) Add the enron data set with: <code>pz reg --path testdata/enron-tiny --name enron-tiny</code></p> </li> <li> <p>Finally, run the simple test program with:     <code>python demos/simpleDemo.py --task enron --datasetid enron-eval-tiny --verbose</code></p> </li> </ul>"},{"location":"api_docs/","title":"Learn Palimpzest","text":""},{"location":"api_docs/#1-sets","title":"1) Sets","text":""},{"location":"api_docs/#2-data-sources","title":"2) Data sources","text":""},{"location":"api_docs/#3-fields","title":"3) Fields","text":""},{"location":"api_docs/#4-policies","title":"4) Policies","text":""},{"location":"api_docs/#5-schemas","title":"5) Schemas","text":""},{"location":"cli/","title":"Palimpzest CLI","text":"<p>Installing Palimpzest also installs its CLI tool <code>pz</code> which provides users with basic utilities for creating and managing their own Palimpzest system. Running <code>pz --help</code> diplays an overview of the CLI's commands: <pre><code>$ pz --help\nUsage: pz [OPTIONS] COMMAND [ARGS]...\n\nThe CLI tool for Palimpzest.\n\nOptions:\n--help  Show this message and exit.\n\nCommands:\nhelp (h)                        Print the help message for PZ.\ninit (i)                        Initialize data directory for PZ.\nls-data (ls,lsdata)             Print a table listing the datasets\n                                registered with PZ.\nregister-data (r,reg,register)  Register a data file or data directory with\n                                PZ.\nrm-data (rm,rmdata)             Remove a dataset that was registered with\n                                PZ.\n</code></pre></p> <p>Users can initialize their own system by running <code>pz init</code>. This will create Palimpzest's working directory in <code>~/.palimpzest</code>: <pre><code>$ pz init\nPalimpzest system initialized in: /Users/matthewrusso/.palimpzest\n</code></pre></p> <p>If we list the set of datasets registered with Palimpzest, we'll see there currently are none: <pre><code>$ pz ls\n+------+------+------+\n| Name | Type | Path |\n+------+------+------+\n+------+------+------+\n\nTotal datasets: 0\n</code></pre></p>"},{"location":"cli/#1-registering-datasets","title":"1) Registering Datasets","text":"Add DatasetRemove Dataset <p>To add (or \"register\") a dataset with Palimpzest, we can use the <code>pz register-data</code> command (also aliased as <code>pz reg</code>) to specify that a file or directory at a given <code>--path</code> should be registered as a dataset with the specified <code>--name</code>: <pre><code>$ pz reg --path README.md --name rdme\nRegistered rdme\n</code></pre></p> <p>If we list Palimpzest's datasets again we will see that <code>README.md</code> has been registered under the dataset named <code>rdme</code>: <pre><code>$ pz ls\n+------+------+------------------------------------------+\n| Name | Type |                   Path                   |\n+------+------+------------------------------------------+\n| rdme | file | /Users/matthewrusso/palimpzest/README.md |\n+------+------+------------------------------------------+\n\nTotal datasets: 1\n</code></pre></p> <p>To remove a dataset from Palimpzest, simply use the <code>pz rm-data</code> command (also aliased as <code>pz rm</code>) and specify the <code>--name</code> of the dataset you would like to remove: <pre><code>$ pz rm --name rdme\nDeleted rdme\n</code></pre></p> <p>Finally, listing our datasets once more will show that the dataset has been deleted: <pre><code>$ pz ls\n+------+------+------+\n| Name | Type | Path |\n+------+------+------+\n+------+------+------+\n\nTotal datasets: 0\n</code></pre></p>"},{"location":"cli/#2-cache-management","title":"2) Cache Management","text":"<p>Palimpzest will cache intermediate results by default. It can be useful to remove them from the cache when trying to evaluate the performance improvement(s) of code changes. We provide a utility command <code>pz clear-cache</code> (also aliased as <code>pz clr</code>) to clear the cache: <pre><code>$ pz clr\nCache cleared\n</code></pre></p>"},{"location":"cli/#3-config-management","title":"3) Config Management","text":"<p>You may wish to work with multiple configurations of Palimpzest in order to, e.g., evaluate the difference in performance between various LLM services for your data extraction task. To see the config Palimpzest is currently using, you can run the <code>pz print-config</code> command (also aliased as <code>pz config</code>): <pre><code>$ pz config\n--- default ---\nfilecachedir: /some/local/filepath\nllmservice: openai\nname: default\nparallel: false\n</code></pre></p> Default (OpenAI)Create New Config (Together AI)Switch ConfigUpdate ConfigDelete Config <p>By default, Palimpzest uses the configuration named <code>default</code>. As shown above, if you run a script using Palimpzest out-of-the-box, it will use OpenAI endpoints for all of its API calls.</p> <p>Now, let's say you wanted to try using together.ai's for your API calls, you could do this by creating a new config with the <code>pz create-config</code> command (also aliased as <code>pz cc</code>): <pre><code>$ pz cc --name together-conf --llmservice together --parallel True --set\nCreated and set config: together-conf\n</code></pre> The <code>--name</code> parameter is required and specifies the unique name for your config. The <code>--llmservice</code> and <code>--parallel</code> options specify the service to use and whether or not to process files in parallel. Finally, if the <code>--set</code> flag is present, Palimpzest will update its current config to point to the newly created config.</p> <p>We can confirm that Palimpzest checked out our new config by running <code>pz config</code>: <pre><code>$ pz config\n--- together-conf ---\nfilecachedir: /some/local/filepath\nllmservice: together\nname: together-conf\nparallel: true\n</code></pre></p> <p>You can switch which config you are using at any time by using the <code>pz set-config</code> command (also aliased as <code>pz set</code>): <pre><code>$ pz set --name default\nSet config: default\n\n$ pz config\n--- default ---\nfilecachedir: /some/local/filepath\nllmservice: openai\nname: default\nparallel: false\n\n$ pz set --name together-conf\nSet config: together-conf\n\n$ pz config\n--- together-conf ---\nfilecachedir: /some/local/filepath\nllmservice: together\nname: together-conf\nparallel: true\n</code></pre></p> <p>You can update an existing config using the <code>pz update</code> command (also aliased as <code>pz uc</code>): <pre><code>$ pz update --name default --settings parallel=true,pdfprocessor=pdfplumber\nUpdated config: default\n\n$ pz config\n--- default ---\nfilecachedir: /some/local/filepath\nllmservice: anthropic\nname: default\nparallel: true\npdfprocessor: pdfplumber\n</code></pre></p> <p>The <code>--name</code> parameter specifies which config to update. <code>--settings</code> specifies all the parameter name and value pairs in the format <code>param_name=param_value</code>, separated by commas.</p> <p>Finally, you can delete a config with the <code>pz rm-config</code> command (also aliased as <code>pz rmc</code>): <pre><code>$ pz rmc --name together-conf\nDeleted config: together-conf\n</code></pre> Note that you cannot delete the <code>default</code> config, and if you delete the config that you currently have set, Palimpzest will set the current config to be <code>default</code>.</p>"},{"location":"tutorials/","title":"Tutorials","text":""},{"location":"tutorials/#1-legal-discovery-workload","title":"1) Legal Discovery Workload","text":""},{"location":"tutorials/#2-real-estate-search-workload","title":"2) Real Estate Search Workload","text":""}]}